     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]    ;制作的目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]  ;告诉汇编编译器，这个是给486使用的，而不是8086 即可以识别到寄存器EAX
     6 00000000                                 [BITS 32]           ;制作32位的机器语言模式
     7 00000000                                 [FILE "naskfunc.nas"]   ;源文件名信息
     8 00000000                                 
     9 00000000                                 ;制作具体的函数库
    10 00000000                                          
    11 00000000                                          GLOBAL         _write_mem8    ;程序中包含的函数名，一定要以_开头，为了衔接c语言的函数库
    12 00000000                                          GLOBAL         _io_hlt, _io_cli, _io_sti, _io_stihlt
    13 00000000                                          GLOBAL         _io_in8, _io_in16, _io_in32
    14 00000000                                          GLOBAL         _io_out8, _io_out16, _io_out32
    15 00000000                                          GLOBAL         _io_load_eflags, _io_store_eflags
    16 00000000                                 
    17 00000000                                 ; 以下是实际的函数内容
    18                                          [SECTION .text]          ;目标文件中写了这些之后再写程序
    19 00000000                                 
    20 00000000                                 _write_mem8: ; void wirte_mem8(int addr, int data);
    21 00000000 8B 4C 24 04                              mov ECX,[esp+4]   ;[ESP+4]中存放的是地址，将其读入搭配ecx中
    22 00000004 8A 44 24 08                              mov al,[esp+8]    ;[esp+8]中存放的是数据，将其放入al中
    23 00000008 88 01                                    mov [ECX],al
    24 0000000A C3                                       RET
    25 0000000B                                 
    26 0000000B                                 _io_hlt:   ;void io_hlt(void);
    27 0000000B F4                                       HLT 
    28 0000000C C3                                       RET
    29 0000000D                                 
    30 0000000D                                 _io_cli: ;void io_cli(void)
    31 0000000D FA                                       CLI 
    32 0000000E C3                                       RET
    33 0000000F                                         
    34 0000000F                                 _io_sti: ;void io_sti(void)
    35 0000000F FB                                       STI 
    36 00000010 C3                                       RET
    37 00000011                                         
    38 00000011                                 _io_stihlt: ;void io_stihld(void)
    39 00000011 FB                                       STI
    40 00000012 F4                                       HLT
    41 00000013 C3                                       RET
    42 00000014                                 
    43 00000014                                 _io_in8: ;int io_in8(int port)
    44 00000014 8B 54 24 04                              mov edx,[esp+4]
    45 00000018 B8 00000000                              mov eax,0
    46 0000001D EC                                       in  al,dx  ;将dx端口的数据读8字节到al中，下面的同理
    47 0000001E C3                                       RET
    48 0000001F                                 
    49 0000001F                                 _io_in16: ;int io_in16(int port)
    50 0000001F 8B 54 24 04                              mov edx,[esp+4]
    51 00000023 B8 00000000                              mov eax,0
    52 00000028 66 ED                                    in  ax,dx
    53 0000002A C3                                       RET
    54 0000002B                                 
    55 0000002B                                 _io_in32: ;int io_in32(int port)
    56 0000002B 8B 54 24 04                              mov edx,[esp+4]
    57 0000002F ED                                       in  eax,dx
    58 00000030 C3                                       RET
    59 00000031                                 
    60 00000031                                 _io_out8: ;void io_out8(int port ,int data)
    61 00000031 8B 54 24 04                              mov edx,[esp+4] ;port
    62 00000035 8A 44 24 08                              mov al,[esp+8]  ;data
    63 00000039 EE                                       out dx,al       ;将al的数据写到dx这个端口
    64 0000003A C3                                       RET    
    65 0000003B                                 
    66 0000003B                                 _io_out16:  ;void io_out16(int port ,int data)
    67 0000003B 8B 54 24 04                              mov edx,[esp+4] ;port
    68 0000003F 66 8B 44 24 08                           mov ax,[esp+8]  ;data
    69 00000044 66 EF                                    out dx,ax       
    70 00000046 C3                                       RET 
    71 00000047                                 
    72 00000047                                 _io_out32:  ;void io_out32(int port ,int data)
    73 00000047 8B 54 24 04                              mov edx,[esp+4] ;port
    74 0000004B 8B 44 24 08                              mov eax,[esp+8]  ;data
    75 0000004F EF                                       out dx,eax      
    76 00000050 C3                                       RET 
    77 00000051                                 
    78 00000051                                 _io_load_eflags: ;int io_load_eflags(void)
    79 00000051 9C                                       pushfd   ;指push flag寄存器
    80 00000052 58                                       pop eax   ;这里解释一下：函数的返回值，在汇编中是由：char型 AL ； int型　AX
    81 00000053 C3                                       RET
    82 00000054                                 
    83 00000054                                 _io_store_eflags: ; void io_store_flags(int flags)
    84 00000054 8B 44 24 04                              mov eax,[esp+4]
    85 00000058 50                                       push eax
    86 00000059 9D                                       popfd
    87 0000005A C3                                       RET
    88 0000005B                                 
