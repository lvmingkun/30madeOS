     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]    ; 制作的目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]  ; 告诉汇编编译器，这个是给 486 使用的，而不是 8086 即可以识别到寄存器EAX
     6 00000000                                 [BITS 32]           ; 制作 32 位的机器语言模式
     7 00000000                                 [FILE "naskfunc.nas"]   ; 源文件名信息
     8 00000000                                 
     9 00000000                                 ; 制作具体的函数库
    10 00000000                                          
    11 00000000                                          GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt
    12 00000000                                          GLOBAL _io_in8, _io_in16, _io_in32
    13 00000000                                          GLOBAL _io_out8, _io_out16, _io_out32
    14 00000000                                          GLOBAL _io_load_eflags, _io_store_eflags
    15 00000000                                 		 GLOBAL _load_gdtr, _load_idtr
    16 00000000                                 		 GLOBAL	_load_cr0, _store_cr0
    17 00000000                                          GLOBAL _asm_inthandler20, _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    18 00000000                                 		 GLOBAL	_memtest_sub
    19 00000000                                 		 GLOBAL _load_tr, _farjmp, _farcall
    20 00000000                                 		 GLOBAL _asm_hrb_api
    21 00000000                                 		 EXTERN	_inthandler20, _inthandler21, _inthandler27, _inthandler2c
    22 00000000                                 		 EXTERN	_hrb_api
    23 00000000                                 
    24 00000000                                 
    25 00000000                                 ; 以下是实际的函数内容
    26                                          [SECTION .text]          ; 目标文件中写了这些之后再写程序
    27 00000000                                 
    28 00000000                                 _io_hlt:   ; void io_hlt(void);
    29 00000000 F4                                       HLT 
    30 00000001 C3                                       RET
    31 00000002                                 
    32 00000002                                 _io_cli: ;void io_cli(void)
    33 00000002 FA                                       CLI 
    34 00000003 C3                                       RET
    35 00000004                                         
    36 00000004                                 _io_sti: ; void io_sti(void)
    37 00000004 FB                                       STI 
    38 00000005 C3                                       RET
    39 00000006                                         
    40 00000006                                 _io_stihlt: ; void io_stihld(void)
    41 00000006 FB                                       STI
    42 00000007 F4                                       HLT
    43 00000008 C3                                       RET
    44 00000009                                 
    45 00000009                                 _io_in8: ; int io_in8(int port)
    46 00000009 8B 54 24 04                              mov edx, [esp + 4]
    47 0000000D B8 00000000                              mov eax, 0
    48 00000012 EC                                       in  al, dx  ; 将dx端口的数据读8字节到al中，下面的同理
    49 00000013 C3                                       RET
    50 00000014                                 
    51 00000014                                 _io_in16: ; int io_in16(int port)
    52 00000014 8B 54 24 04                              mov edx, [esp + 4]
    53 00000018 B8 00000000                              mov eax, 0
    54 0000001D 66 ED                                    in  ax, dx
    55 0000001F C3                                       RET
    56 00000020                                 
    57 00000020                                 _io_in32: ; int io_in32(int port)
    58 00000020 8B 54 24 04                              mov edx, [esp + 4]
    59 00000024 ED                                       in  eax, dx
    60 00000025 C3                                       RET
    61 00000026                                 
    62 00000026                                 _io_out8: ; void io_out8(int port , int data)
    63 00000026 8B 54 24 04                              mov edx, [esp + 4] ; port
    64 0000002A 8A 44 24 08                              mov al, [esp + 8]  ; data
    65 0000002E EE                                       out dx, al       ; 将al的数据写到dx这个端口
    66 0000002F C3                                       RET    
    67 00000030                                 
    68 00000030                                 _io_out16:  ; void io_out16(int port , int data)
    69 00000030 8B 54 24 04                              mov edx, [esp + 4] ; port
    70 00000034 66 8B 44 24 08                           mov ax,[esp + 8]  ; data
    71 00000039 66 EF                                    out dx, ax       
    72 0000003B C3                                       RET 
    73 0000003C                                 
    74 0000003C                                 _io_out32:  ; void io_out32(int port , int data)
    75 0000003C 8B 54 24 04                              mov edx, [esp + 4] ; port
    76 00000040 8B 44 24 08                              mov eax, [esp + 8]  ; data
    77 00000044 EF                                       out dx, eax      
    78 00000045 C3                                       RET 
    79 00000046                                 
    80 00000046                                 _io_load_eflags: ; int io_load_eflags(void)
    81 00000046 9C                                       pushfd   ; 指push flag寄存器
    82 00000047 58                                       pop eax   ; 这里解释一下：函数的返回值，在汇编中是由：char型 AL ； int型　AX
    83 00000048 C3                                       RET
    84 00000049                                 
    85 00000049                                 _io_store_eflags: ; void io_store_flags(int flags)
    86 00000049 8B 44 24 04                              mov eax, [esp + 4]
    87 0000004D 50                                       push eax
    88 0000004E 9D                                       popfd
    89 0000004F C3                                       RET
    90 00000050                                 
    91 00000050                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    92 00000050 66 8B 44 24 04                  		MOV	AX, [ESP + 4]		; limit
    93 00000055 66 89 44 24 06                  		MOV	[ESP + 6], AX
    94 0000005A 0F 01 54 24 06                  		LGDT [ESP + 6]
    95 0000005F C3                              		RET
    96 00000060                                 
    97 00000060                                 _load_idtr:		; void load_idtr(int limit, int addr);
    98 00000060 66 8B 44 24 04                  		MOV	AX, [ESP + 4]		; limit
    99 00000065 66 89 44 24 06                  		MOV	[ESP + 6], AX
   100 0000006A 0F 01 5C 24 06                  		LIDT [ESP + 6]
   101 0000006F C3                              		RET
   102 00000070                                 
   103 00000070                                 _asm_inthandler20:
   104 00000070 06                              	PUSH ES
   105 00000071 1E                              	PUSH DS
   106 00000072 60                              	PUSHAD
   107 00000073 89 E0                           	MOV	EAX, ESP
   108 00000075 50                              	PUSH EAX
   109 00000076 66 8C D0                        	MOV	AX, SS     ; 以下三步是c规定的，必须相同 ss es ds
   110 00000079 8E D8                           	MOV	DS, AX
   111 0000007B 8E C0                           	MOV	ES, AX
   112 0000007D E8 [00000000]                   	CALL _inthandler20
   113 00000082 58                              	POP	EAX
   114 00000083 61                              	POPAD
   115 00000084 1F                              	POP	DS
   116 00000085 07                              	POP	ES
   117 00000086 CF                              	IRETD
   118 00000087                                 
   119 00000087                                 _asm_inthandler21:
   120 00000087 06                              	PUSH ES
   121 00000088 1E                              	PUSH DS
   122 00000089 60                              	PUSHAD
   123 0000008A 89 E0                           	MOV	EAX, ESP
   124 0000008C 50                              	PUSH EAX
   125 0000008D 66 8C D0                        	MOV	AX, SS     ; 以下三步是c规定的，必须相同 ss es ds
   126 00000090 8E D8                           	MOV	DS, AX
   127 00000092 8E C0                           	MOV	ES, AX
   128 00000094 E8 [00000000]                   	CALL _inthandler21
   129 00000099 58                              	POP	EAX
   130 0000009A 61                              	POPAD
   131 0000009B 1F                              	POP	DS
   132 0000009C 07                              	POP	ES
   133 0000009D CF                              	IRETD
   134 0000009E                                 
   135 0000009E                                 _asm_inthandler27:
   136 0000009E 06                              	PUSH ES
   137 0000009F 1E                              	PUSH DS
   138 000000A0 60                              	PUSHAD
   139 000000A1 89 E0                           	MOV	EAX, ESP
   140 000000A3 50                              	PUSH EAX
   141 000000A4 66 8C D0                        	MOV	AX, SS
   142 000000A7 8E D8                           	MOV	DS, AX
   143 000000A9 8E C0                           	MOV	ES, AX
   144 000000AB E8 [00000000]                   	CALL _inthandler27
   145 000000B0 58                              	POP	EAX
   146 000000B1 61                              	POPAD
   147 000000B2 1F                              	POP	DS
   148 000000B3 07                              	POP	ES
   149 000000B4 CF                              	IRETD
   150 000000B5                                 
   151 000000B5                                 _asm_inthandler2c:
   152 000000B5 06                              	PUSH ES
   153 000000B6 1E                              	PUSH DS
   154 000000B7 60                              	PUSHAD
   155 000000B8 89 E0                           	MOV	EAX, ESP
   156 000000BA 50                              	PUSH EAX
   157 000000BB 66 8C D0                        	MOV	AX, SS
   158 000000BE 8E D8                           	MOV	DS, AX
   159 000000C0 8E C0                           	MOV	ES, AX
   160 000000C2 E8 [00000000]                   	CALL _inthandler2c
   161 000000C7 58                              	POP	EAX
   162 000000C8 61                              	POPAD
   163 000000C9 1F                              	POP	DS
   164 000000CA 07                              	POP	ES
   165 000000CB CF                              	IRETD
   166 000000CC                                 
   167 000000CC                                 _load_cr0: ; int load_cro(void)
   168 000000CC 0F 20 C0                                mov eax, cr0 
   169 000000CF C3                                      RET
   170 000000D0                                 
   171 000000D0                                 _store_cr0: ; void load_cro(int cr0)
   172 000000D0 8B 44 24 04                             mov EAX, [esp + 4]
   173 000000D4 0F 22 C0                                mov cr0, EAX
   174 000000D7 C3                                      RET  
   175 000000D8                                 
   176 000000D8                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   177 000000D8 57                              	PUSH	EDI
   178 000000D9 56                              	PUSH	ESI
   179 000000DA 53                              	PUSH	EBX
   180 000000DB BE AA55AA55                     	MOV	ESI, 0xaa55aa55			; pat0 = 0xaa55aa55;
   181 000000E0 BF 55AA55AA                     	MOV	EDI, 0x55aa55aa			; pat1 = 0x55aa55aa;
   182 000000E5 8B 44 24 10                     	MOV	EAX, [ESP + 12 + 4]			; i = start;
   183 000000E9                                 
   184 000000E9                                 mts_loop:
   185 000000E9 89 C3                           	MOV	EBX, EAX
   186 000000EB 81 C3 00000FFC                  	ADD	EBX, 0xffc				; p = i + 0xffc;
   187 000000F1 8B 13                           	MOV	EDX, [EBX]				; old = *p;
   188 000000F3 89 33                           	MOV	[EBX], ESI				; *p = pat0;
   189 000000F5 83 33 FF                        	XOR	DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   190 000000F8 3B 3B                           	CMP	EDI, [EBX]				; if (*p != pat1) goto fin;
   191 000000FA 75 18                           	JNE	mts_fin
   192 000000FC 83 33 FF                        	XOR	DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   193 000000FF 3B 33                           	CMP	ESI, [EBX]				; if (*p != pat0) goto fin;
   194 00000101 75 11                           	JNE	mts_fin
   195 00000103 89 13                           	MOV	[EBX], EDX				; *p = old;
   196 00000105 05 00001000                     	ADD	EAX, 0x1000				; i += 0x1000;
   197 0000010A 3B 44 24 14                     	CMP	EAX, [ESP + 12 + 8]		; if (i <= end) goto mts_loop;
   198 0000010E 76 D9                           	JBE	mts_loop
   199 00000110 5B                              	POP	EBX
   200 00000111 5E                              	POP	ESI
   201 00000112 5F                              	POP	EDI
   202 00000113 C3                              	RET
   203 00000114                                 
   204 00000114                                 mts_fin:
   205 00000114 89 13                           	MOV	[EBX], EDX 		; *p = old;
   206 00000116 5B                              	POP	EBX
   207 00000117 5E                              	POP	ESI
   208 00000118 5F                              	POP	EDI
   209 00000119 C3                              	RET
   210 0000011A                                 
   211 0000011A                                 _load_tr: 				; void load_tr(int tr);
   212 0000011A 0F 00 5C 24 04                  	LTR [esp + 4] 		; tr
   213 0000011F C3                              	RET
   214 00000120                                 
   215 00000120                                 _farjmp: 				; void farjmp(int eip, int cs);
   216 00000120 FF 6C 24 04                     	JMP far [esp + 4] 	; 高地址是cs，低地址是eip
   217 00000124 C3                              	RET
   218 00000125                                 
   219 00000125                                 _farcall: 				; void farcall(int eip, int cs)
   220 00000125 FF 5C 24 04                         CALL FAR [ESP + 4]
   221 00000129 C3                              	RET
   222 0000012A                                 
   223 0000012A                                 _asm_hrb_api:
   224 0000012A FB                                  STI
   225 0000012B 60                              	PUSHAD 				; 用于保存寄存器值的push
   226 0000012C 60                              	PUSHAD 				; 用于向hrb_api传值的push
   227 0000012D E8 [00000000]                   	CALL _hrb_api
   228 00000132 83 C4 20                        	ADD ESP, 32
   229 00000135 61                              	POPAD
   230 00000136 CF                              	IRETD