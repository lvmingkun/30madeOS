     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]    ; 制作的目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]  ; 告诉汇编编译器，这个是给 486 使用的，而不是 8086 即可以识别到寄存器EAX
     6 00000000                                 [BITS 32]           ; 制作 32 位的机器语言模式
     7 00000000                                 [FILE "naskfunc.nas"]   ; 源文件名信息
     8 00000000                                 
     9 00000000                                 ; 制作具体的函数库
    10 00000000                                          
    11 00000000                                     GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt
    12 00000000                                     GLOBAL _io_in8, _io_in16, _io_in32
    13 00000000                                     GLOBAL _io_out8, _io_out16, _io_out32
    14 00000000                                     GLOBAL _io_load_eflags, _io_store_eflags
    15 00000000                                 	GLOBAL _load_gdtr, _load_idtr
    16 00000000                                 	GLOBAL	_load_cr0, _store_cr0
    17 00000000                                     GLOBAL _asm_inthandler20, _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c, _asm_inthandler0d
    18 00000000                                 	GLOBAL	_memtest_sub
    19 00000000                                 	GLOBAL _load_tr, _farjmp, _farcall
    20 00000000                                 	GLOBAL _asm_hrb_api, _start_app
    21 00000000                                 	EXTERN	_inthandler20, _inthandler21, _inthandler27, _inthandler2c, _inthandler0d
    22 00000000                                 	EXTERN	_hrb_api
    23 00000000                                 
    24 00000000                                 
    25 00000000                                 ; 以下是实际的函数内容
    26                                          [SECTION .text]          ; 目标文件中写了这些之后再写程序
    27 00000000                                 
    28 00000000                                 _io_hlt:   ; void io_hlt(void);
    29 00000000 F4                                  HLT 
    30 00000001 C3                                  RET
    31 00000002                                 
    32 00000002                                 _io_cli: ;void io_cli(void)
    33 00000002 FA                                  CLI 
    34 00000003 C3                                  RET
    35 00000004                                         
    36 00000004                                 _io_sti: ; void io_sti(void)
    37 00000004 FB                                  STI 
    38 00000005 C3                                  RET
    39 00000006                                         
    40 00000006                                 _io_stihlt: ; void io_stihld(void)
    41 00000006 FB                                  STI
    42 00000007 F4                                  HLT
    43 00000008 C3                                  RET
    44 00000009                                 
    45 00000009                                 _io_in8: ; int io_in8(int port)
    46 00000009 8B 54 24 04                         mov edx, [esp + 4]
    47 0000000D B8 00000000                         mov eax, 0
    48 00000012 EC                                  in  al, dx  ; 将dx端口的数据读8字节到al中，下面的同理
    49 00000013 C3                                  RET
    50 00000014                                 
    51 00000014                                 _io_in16: ; int io_in16(int port)
    52 00000014 8B 54 24 04                         mov edx, [esp + 4]
    53 00000018 B8 00000000                         mov eax, 0
    54 0000001D 66 ED                               in  ax, dx
    55 0000001F C3                                  RET
    56 00000020                                 
    57 00000020                                 _io_in32: ; int io_in32(int port)
    58 00000020 8B 54 24 04                         mov edx, [esp + 4]
    59 00000024 ED                                  in  eax, dx
    60 00000025 C3                                  RET
    61 00000026                                 
    62 00000026                                 _io_out8: ; void io_out8(int port , int data)
    63 00000026 8B 54 24 04                         mov edx, [esp + 4] ; port
    64 0000002A 8A 44 24 08                         mov al, [esp + 8]  ; data
    65 0000002E EE                                  out dx, al       ; 将al的数据写到dx这个端口
    66 0000002F C3                                  RET    
    67 00000030                                 
    68 00000030                                 _io_out16:  ; void io_out16(int port , int data)
    69 00000030 8B 54 24 04                         mov edx, [esp + 4] ; port
    70 00000034 66 8B 44 24 08                      mov ax,[esp + 8]  ; data
    71 00000039 66 EF                               out dx, ax       
    72 0000003B C3                                  RET 
    73 0000003C                                 
    74 0000003C                                 _io_out32:  ; void io_out32(int port , int data)
    75 0000003C 8B 54 24 04                         mov edx, [esp + 4] ; port
    76 00000040 8B 44 24 08                         mov eax, [esp + 8]  ; data
    77 00000044 EF                                  out dx, eax      
    78 00000045 C3                                  RET 
    79 00000046                                 
    80 00000046                                 _io_load_eflags: ; int io_load_eflags(void)
    81 00000046 9C                                  pushfd   ; 指push flag寄存器
    82 00000047 58                                  pop eax   ; 这里解释一下：函数的返回值，在汇编中是由：char型 AL ； int型　AX
    83 00000048 C3                                  RET
    84 00000049                                 
    85 00000049                                 _io_store_eflags: ; void io_store_flags(int flags)
    86 00000049 8B 44 24 04                         mov eax, [esp + 4]
    87 0000004D 50                                  push eax
    88 0000004E 9D                                  popfd
    89 0000004F C3                                  RET
    90 00000050                                 
    91 00000050                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    92 00000050 66 8B 44 24 04                  	MOV	AX, [ESP + 4]		; limit
    93 00000055 66 89 44 24 06                  	MOV	[ESP + 6], AX
    94 0000005A 0F 01 54 24 06                  	LGDT [ESP + 6]
    95 0000005F C3                              	RET
    96 00000060                                 
    97 00000060                                 _load_idtr:		; void load_idtr(int limit, int addr);
    98 00000060 66 8B 44 24 04                  	MOV	AX, [ESP + 4]		; limit
    99 00000065 66 89 44 24 06                  	MOV	[ESP + 6], AX
   100 0000006A 0F 01 5C 24 06                  	LIDT [ESP + 6]
   101 0000006F C3                              	RET
   102 00000070                                 
   103 00000070                                 _asm_inthandler0d:
   104 00000070 FB                              	STI
   105 00000071 06                              	PUSH ES
   106 00000072 1E                              	PUSH DS
   107 00000073 60                              	PUSHAD
   108 00000074 89 E0                           	MOV	EAX, ESP
   109 00000076 50                              	PUSH EAX
   110 00000077 66 8C D0                        	MOV	AX, SS
   111 0000007A 8E D8                           	MOV	DS, AX
   112 0000007C 8E C0                           	MOV	ES, AX
   113 0000007E E8 [00000000]                   	CALL _inthandler0d
   114 00000083 83 F8 00                        	CMP	EAX, 0		
   115 00000086 0F 85 000000DF                  	JNE	end_app		
   116 0000008C 58                              	POP	EAX
   117 0000008D 61                              	POPAD
   118 0000008E 1F                              	POP	DS
   119 0000008F 07                              	POP	ES
   120 00000090 83 C4 04                        	ADD	ESP, 4		; INT 0x0d 需要这句
   121 00000093 CF                              	IRETD
   122 00000094                                 
   123 00000094                                 _asm_inthandler20:
   124 00000094 06                              	PUSH ES
   125 00000095 1E                              	PUSH DS
   126 00000096 60                              	PUSHAD
   127 00000097 89 E0                           	MOV	EAX, ESP
   128 00000099 50                              	PUSH EAX
   129 0000009A 66 8C D0                        	MOV	AX, SS     ; 以下三步是c规定的，必须相同 ss es ds
   130 0000009D 8E D8                           	MOV	DS, AX
   131 0000009F 8E C0                           	MOV	ES, AX
   132 000000A1 E8 [00000000]                   	CALL _inthandler20
   133 000000A6 58                              	POP	EAX
   134 000000A7 61                              	POPAD
   135 000000A8 1F                              	POP	DS
   136 000000A9 07                              	POP	ES
   137 000000AA CF                              	IRETD
   138 000000AB                                 
   139 000000AB                                 _asm_inthandler21:
   140 000000AB 06                              	PUSH ES
   141 000000AC 1E                              	PUSH DS
   142 000000AD 60                              	PUSHAD
   143 000000AE 89 E0                           	MOV	EAX, ESP
   144 000000B0 50                              	PUSH EAX
   145 000000B1 66 8C D0                        	MOV	AX, SS     ; 以下三步是c规定的，必须相同 ss es ds
   146 000000B4 8E D8                           	MOV	DS, AX
   147 000000B6 8E C0                           	MOV	ES, AX
   148 000000B8 E8 [00000000]                   	CALL _inthandler21
   149 000000BD 58                              	POP	EAX
   150 000000BE 61                              	POPAD
   151 000000BF 1F                              	POP	DS
   152 000000C0 07                              	POP	ES
   153 000000C1 CF                              	IRETD
   154 000000C2                                 
   155 000000C2                                 _asm_inthandler27:
   156 000000C2 06                              	PUSH ES
   157 000000C3 1E                              	PUSH DS
   158 000000C4 60                              	PUSHAD
   159 000000C5 89 E0                           	MOV	EAX, ESP
   160 000000C7 50                              	PUSH EAX
   161 000000C8 66 8C D0                        	MOV	AX, SS
   162 000000CB 8E D8                           	MOV	DS, AX
   163 000000CD 8E C0                           	MOV	ES, AX
   164 000000CF E8 [00000000]                   	CALL _inthandler27
   165 000000D4 58                              	POP	EAX
   166 000000D5 61                              	POPAD
   167 000000D6 1F                              	POP	DS
   168 000000D7 07                              	POP	ES
   169 000000D8 CF                              	IRETD
   170 000000D9                                 
   171 000000D9                                 _asm_inthandler2c:
   172 000000D9 06                              	PUSH ES
   173 000000DA 1E                              	PUSH DS
   174 000000DB 60                              	PUSHAD
   175 000000DC 89 E0                           	MOV	EAX, ESP
   176 000000DE 50                              	PUSH EAX
   177 000000DF 66 8C D0                        	MOV	AX, SS
   178 000000E2 8E D8                           	MOV	DS, AX
   179 000000E4 8E C0                           	MOV	ES, AX
   180 000000E6 E8 [00000000]                   	CALL _inthandler2c
   181 000000EB 58                              	POP	EAX
   182 000000EC 61                              	POPAD
   183 000000ED 1F                              	POP	DS
   184 000000EE 07                              	POP	ES
   185 000000EF CF                              	IRETD
   186 000000F0                                 
   187 000000F0                                 _load_cr0: ; int load_cro(void)
   188 000000F0 0F 20 C0                                mov eax, cr0 
   189 000000F3 C3                                      RET
   190 000000F4                                 
   191 000000F4                                 _store_cr0: ; void load_cro(int cr0)
   192 000000F4 8B 44 24 04                             mov EAX, [esp + 4]
   193 000000F8 0F 22 C0                                mov cr0, EAX
   194 000000FB C3                                      RET  
   195 000000FC                                 
   196 000000FC                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   197 000000FC 57                              	PUSH	EDI
   198 000000FD 56                              	PUSH	ESI
   199 000000FE 53                              	PUSH	EBX
   200 000000FF BE AA55AA55                     	MOV	ESI, 0xaa55aa55			; pat0 = 0xaa55aa55;
   201 00000104 BF 55AA55AA                     	MOV	EDI, 0x55aa55aa			; pat1 = 0x55aa55aa;
   202 00000109 8B 44 24 10                     	MOV	EAX, [ESP + 12 + 4]			; i = start;
   203 0000010D                                 
   204 0000010D                                 mts_loop:
   205 0000010D 89 C3                           	MOV	EBX, EAX
   206 0000010F 81 C3 00000FFC                  	ADD	EBX, 0xffc				; p = i + 0xffc;
   207 00000115 8B 13                           	MOV	EDX, [EBX]				; old = *p;
   208 00000117 89 33                           	MOV	[EBX], ESI				; *p = pat0;
   209 00000119 83 33 FF                        	XOR	DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   210 0000011C 3B 3B                           	CMP	EDI, [EBX]				; if (*p != pat1) goto fin;
   211 0000011E 75 18                           	JNE	mts_fin
   212 00000120 83 33 FF                        	XOR	DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   213 00000123 3B 33                           	CMP	ESI, [EBX]				; if (*p != pat0) goto fin;
   214 00000125 75 11                           	JNE	mts_fin
   215 00000127 89 13                           	MOV	[EBX], EDX				; *p = old;
   216 00000129 05 00001000                     	ADD	EAX, 0x1000				; i += 0x1000;
   217 0000012E 3B 44 24 14                     	CMP	EAX, [ESP + 12 + 8]		; if (i <= end) goto mts_loop;
   218 00000132 76 D9                           	JBE	mts_loop
   219 00000134 5B                              	POP	EBX
   220 00000135 5E                              	POP	ESI
   221 00000136 5F                              	POP	EDI
   222 00000137 C3                              	RET
   223 00000138                                 
   224 00000138                                 mts_fin:
   225 00000138 89 13                           	MOV	[EBX], EDX 		; *p = old;
   226 0000013A 5B                              	POP	EBX
   227 0000013B 5E                              	POP	ESI
   228 0000013C 5F                              	POP	EDI
   229 0000013D C3                              	RET
   230 0000013E                                 
   231 0000013E                                 _load_tr: 				; void load_tr(int tr);
   232 0000013E 0F 00 5C 24 04                  	LTR [esp + 4] 		; tr
   233 00000143 C3                              	RET
   234 00000144                                 
   235 00000144                                 _farjmp: 				; void farjmp(int eip, int cs);
   236 00000144 FF 6C 24 04                     	JMP far [esp + 4] 	; 高地址是cs，低地址是eip
   237 00000148 C3                              	RET
   238 00000149                                 
   239 00000149                                 _farcall: 				; void farcall(int eip, int cs)
   240 00000149 FF 5C 24 04                         CALL FAR [ESP + 4]
   241 0000014D C3                              	RET
   242 0000014E                                 
   243 0000014E                                 _asm_hrb_api:
   244 0000014E FB                              		STI
   245 0000014F 1E                              		PUSH DS
   246 00000150 06                              		PUSH ES
   247 00000151 60                              		PUSHAD		; 用于保存的PUSH
   248 00000152 60                              		PUSHAD		; 用于向hrb_api传值的PUSH
   249 00000153 66 8C D0                        		MOV	AX, SS
   250 00000156 8E D8                           		MOV	DS, AX  ; 将操作系统用段地址存入DS和ES
   251 00000158 8E C0                           		MOV	ES, AX
   252 0000015A E8 [00000000]                   		CALL _hrb_api
   253 0000015F 83 F8 00                        		CMP	EAX, 0  ; 当EAX不为 0 时程序结束
   254 00000162 75 07                           		JNE	end_app
   255 00000164 83 C4 20                        		ADD	ESP, 32
   256 00000167 61                              		POPAD
   257 00000168 07                              		POP	ES
   258 00000169 1F                              		POP	DS
   259 0000016A CF                              		IRETD
   260 0000016B                                 	end_app:
   261 0000016B                                 	; EAX为tss.esp0的地址
   262 0000016B 8B 20                           		MOV	ESP,[EAX]
   263 0000016D 61                              		POPAD
   264 0000016E C3                              		RET	; 返回cmd_app
   265 0000016F                                 
   266 0000016F                                 
   267 0000016F                                 ; 此时还在操作系统内部
   268 0000016F                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   269 0000016F 60                              		PUSHAD				; 将操作系统内部此时的32位寄存器值全部保存起来
   270 00000170 8B 44 24 24                     		MOV	EAX, [ESP + 36]	; 导入应用程序用EIP
   271 00000174 8B 4C 24 28                     		MOV	ECX, [ESP + 40]	; 应用程序用CS
   272 00000178 8B 54 24 2C                     		MOV	EDX, [ESP + 44]	; 应用程序用ESP
   273 0000017C 8B 5C 24 30                     		MOV	EBX, [ESP + 48]	; 应用程序用DS/SS
   274 00000180 8B 6C 24 34                     		MOV	EBP, [ESP + 52]	; tss.esp0的地址, 可参考task的定义
   275 00000184 89 65 00                        		MOV	[EBP], ESP		; 保存操作系统用ESP，[ebp] 指向的是task->tss.esp
   276 00000187 8C 55 04                        		MOV	[EBP + 4], SS	; 保存操作系统用SS, [ebp + 4] 指向的是task->tss.ss
   277 0000018A 8E C3                           		MOV	ES, BX			; 将DS/SS进行复制，且以防万一，也给其他寄存器值进行赋值
   278 0000018C 8E DB                           		MOV	DS, BX
   279 0000018E 8E E3                           		MOV	FS, BX
   280 00000190 8E EB                           		MOV	GS, BX
   281 00000192                                 ; 下面调整栈，以免用RETF跳转到应用程序
   282 00000192 83 C9 03                        		OR	ECX, 3 			; 将应用程序用段号和3进行OR运算，以便后面跳转到应用程序段
   283 00000195 83 CB 03                        		OR  EBX, 3 			; 将应用程序用段号和3进行OR运算
   284 00000198 53                              		PUSH EBX			; 应用程序的SS
   285 00000199 52                              		PUSH EDX			; 应用程序的ESP
   286 0000019A 51                              		PUSH ECX			; 应用程序的CS
   287 0000019B 50                              		PUSH EAX			; 应用程序的EIP
   288 0000019C CB                              		RETF				;取得CS和EIP，然后跳转到应用程序的地址
   289 0000019D                                 ; 应用程序结束后不会回到这里，此时还剩与esp、ss、pushad的各个值
