     1 00000000                                 [FORMAT "WCOFF"]				; 生成对象文件的模式	
     2 00000000                                 [INSTRSET "i486p"]				; 使用 486 兼容模式
     3 00000000                                 [BITS 32]						; 使用 32 位模式机器语言
     4 00000000                                 [FILE "a_nask.nas"]				; 源文件信息名
     5 00000000                                 
     6 00000000                                 	GLOBAL _api_putchar, _api_getkey
     7 00000000                                 	GLOBAL _api_end
     8 00000000                                 	GLOBAL _api_putstr0, _api_beep
     9 00000000                                 	GLOBAL _api_openwin, _api_putstrwin, _api_boxfilwin, _api_closewin
    10 00000000                                 	GLOBAL _api_initmalloc, _api_malloc, _api_free
    11 00000000                                 	GLOBAL _api_point, _api_refreshwin, _api_linewin
    12 00000000                                 	GLOBAL	_api_alloctimer, _api_inittimer, _api_settimer, _api_freetimer
    13 00000000                                 
    14 00000000                                 
    15                                          [SECTION .text]
    16 00000000                                 ; 调用cons_putchar这个模式
    17 00000000                                 _api_putchar:	; void api_putchar(int c);
    18 00000000 BA 00000001                     	MOV	EDX, 1
    19 00000005 8A 44 24 04                     	MOV	AL, [ESP + 4]	; c
    20 00000009 CD 40                           	INT	0x40
    21 0000000B C3                              	RET
    22 0000000C                                 
    23 0000000C                                 _api_end:    	; void api_end(void);
    24 0000000C BA 00000004                     	MOV EDX, 4
    25 00000011 CD 40                               INT 0x40
    26 00000013                                 
    27 00000013                                 _api_putstr0:  ; void api_putstr0(char *s);
    28 00000013 53                                  PUSH EBX
    29 00000014 BA 00000002                     	MOV	EDX, 2
    30 00000019 8B 5C 24 08                     	MOV	EBX, [ESP + 8]	; S
    31 0000001D CD 40                           	INT	0x40
    32 0000001F 5B                              	POP	EBX
    33 00000020 C3                              	RET
    34 00000021                                 
    35 00000021                                 _api_openwin:	; int api_openwin(char *buf, int xsiz, int ysiz, int col_inv, char *title);
    36 00000021 57                              	PUSH EDI
    37 00000022 56                              	PUSH ESI
    38 00000023 53                              	PUSH EBX
    39 00000024 BA 00000005                     	MOV	EDX, 5
    40 00000029 8B 5C 24 10                     	MOV	EBX, [ESP + 16]	; buf
    41 0000002D 8B 74 24 14                     	MOV	ESI, [ESP + 20]	; xsiz
    42 00000031 8B 7C 24 18                     	MOV	EDI, [ESP + 24]	; ysiz
    43 00000035 8B 44 24 1C                     	MOV	EAX, [ESP + 28]	; col_inv
    44 00000039 8B 4C 24 20                     	MOV	ECX, [ESP + 32]	; title
    45 0000003D CD 40                           	INT	0x40
    46 0000003F 5B                              	POP	EBX
    47 00000040 5E                              	POP	ESI
    48 00000041 5F                              	POP	EDI
    49 00000042 C3                              	RET
    50 00000043                                 
    51 00000043                                 
    52 00000043                                 _api_putstrwin:	; void api_putstrwin(int win, int x, int y, int col, int len, char *str);
    53 00000043 57                              	PUSH EDI
    54 00000044 56                              	PUSH ESI
    55 00000045 55                              	PUSH EBP
    56 00000046 53                              	PUSH EBX
    57 00000047 BA 00000006                     	MOV	EDX, 6
    58 0000004C 8B 5C 24 14                     	MOV	EBX, [ESP + 20]	; win
    59 00000050 8B 74 24 18                     	MOV	ESI, [ESP + 24]	; x
    60 00000054 8B 7C 24 1C                     	MOV	EDI, [ESP + 28]	; y
    61 00000058 8B 44 24 20                     	MOV	EAX, [ESP + 32]	; col
    62 0000005C 8B 4C 24 24                     	MOV	ECX, [ESP + 36]	; len
    63 00000060 8B 6C 24 28                     	MOV	EBP, [ESP + 40]	; str
    64 00000064 CD 40                           	INT	0x40
    65 00000066 5B                              	POP	EBX
    66 00000067 5D                              	POP	EBP
    67 00000068 5E                              	POP	ESI
    68 00000069 5F                              	POP	EDI
    69 0000006A C3                              	RET
    70 0000006B                                 
    71 0000006B                                 _api_boxfilwin:	; void api_boxfilwin(int win, int x0, int y0, int x1, int y1, int col);
    72 0000006B 57                              	PUSH EDI
    73 0000006C 56                              	PUSH ESI
    74 0000006D 55                              	PUSH EBP
    75 0000006E 53                              	PUSH EBX
    76 0000006F BA 00000007                     	MOV	EDX, 7
    77 00000074 8B 5C 24 14                     	MOV	EBX, [ESP + 20]	; win
    78 00000078 8B 44 24 18                     	MOV	EAX, [ESP + 24]	; x0
    79 0000007C 8B 4C 24 1C                     	MOV	ECX, [ESP + 28]	; y0
    80 00000080 8B 74 24 20                     	MOV	ESI, [ESP + 32]	; x1
    81 00000084 8B 7C 24 24                     	MOV	EDI, [ESP + 36]	; y1
    82 00000088 8B 6C 24 28                     	MOV	EBP, [ESP + 40]	; col
    83 0000008C CD 40                           	INT	0x40
    84 0000008E 5B                              	POP	EBX
    85 0000008F 5D                              	POP	EBP
    86 00000090 5E                              	POP	ESI
    87 00000091 5F                              	POP	EDI
    88 00000092 C3                              	RET
    89 00000093                                 
    90 00000093                                 
    91 00000093                                 _api_initmalloc:	; void api_initmalloc(void);
    92 00000093 53                              	PUSH EBX
    93 00000094 BA 00000008                     	MOV	EDX, 8
    94 00000099 2E 8B 1D 00000020               	MOV	EBX, [CS:0x0020]	; malloc的内存地址空间
    95 000000A0 89 D8                           	MOV	EAX, EBX
    96 000000A2 05 00008000                     	ADD	EAX, 32 * 1024		; 因为管理内存空间的结构大小也要在其中存储，因此实际的内存起始地址在32kb之后
    97 000000A7 2E 8B 0D 00000000               	MOV	ECX, [CS:0x0000]	; 数据段大小
    98 000000AE 29 C1                           	SUB	ECX, EAX
    99 000000B0 CD 40                           	INT	0x40
   100 000000B2 5B                              	POP	EBX
   101 000000B3 C3                              	RET
   102 000000B4                                 
   103 000000B4                                 _api_malloc:		; char *api_malloc(int size);
   104 000000B4 53                              	PUSH EBX
   105 000000B5 BA 00000009                     	MOV	EDX, 9
   106 000000BA 2E 8B 1D 00000020               	MOV	EBX, [CS:0x0020]
   107 000000C1 8B 4C 24 08                     	MOV	ECX, [ESP + 8]		; size
   108 000000C5 CD 40                           	INT	0x40
   109 000000C7 5B                              	POP	EBX
   110 000000C8 C3                              	RET
   111 000000C9                                 
   112 000000C9                                 _api_free:			; void api_free(char *addr, int size);
   113 000000C9 53                              	PUSH EBX
   114 000000CA BA 0000000A                     	MOV	EDX, 10
   115 000000CF 2E 8B 1D 00000020               	MOV	EBX, [CS:0x0020]
   116 000000D6 8B 44 24 08                     	MOV	EAX, [ESP + 8]		; addr
   117 000000DA 8B 4C 24 0C                     	MOV	ECX, [ESP + 12]		; size
   118 000000DE CD 40                           	INT	0x40
   119 000000E0 5B                              	POP	EBX
   120 000000E1 C3                              	RET
   121 000000E2                                 
   122 000000E2                                 _api_point:		; void api_point(int win, int x, int y, int col);
   123 000000E2 57                              	PUSH EDI
   124 000000E3 56                              	PUSH ESI
   125 000000E4 53                              	PUSH EBX
   126 000000E5 BA 0000000B                     	MOV	EDX, 11
   127 000000EA 8B 5C 24 10                     	MOV	EBX, [ESP + 16]		; win
   128 000000EE 8B 74 24 14                     	MOV	ESI, [ESP + 20]		; x
   129 000000F2 8B 7C 24 18                     	MOV	EDI, [ESP + 24]		; y
   130 000000F6 8B 44 24 1C                     	MOV	EAX, [ESP + 28]		; col
   131 000000FA CD 40                           	INT	0x40
   132 000000FC 5B                              	POP	EBX
   133 000000FD 5E                              	POP	ESI
   134 000000FE 5F                              	POP	EDI
   135 000000FF C3                              	RET
   136 00000100                                 
   137 00000100                                 
   138 00000100                                 _api_refreshwin:	; void api_refreshwin(int win, int x0, int y0, int x1, int y1);
   139 00000100 57                              	PUSH EDI
   140 00000101 56                              	PUSH ESI
   141 00000102 53                              	PUSH EBX
   142 00000103 BA 0000000C                     	MOV	EDX, 12
   143 00000108 8B 5C 24 10                     	MOV	EBX, [ESP + 16]		; win
   144 0000010C 8B 44 24 14                     	MOV	EAX, [ESP + 20]		; x0
   145 00000110 8B 4C 24 18                     	MOV	ECX, [ESP + 24]		; y0
   146 00000114 8B 74 24 1C                     	MOV	ESI, [ESP + 28]		; x1
   147 00000118 8B 7C 24 20                     	MOV	EDI, [ESP + 32]		; y1
   148 0000011C CD 40                           	INT	0x40
   149 0000011E 5B                              	POP	EBX
   150 0000011F 5E                              	POP	ESI
   151 00000120 5F                              	POP	EDI
   152 00000121 C3                              	RET
   153 00000122                                 
   154 00000122                                 _api_linewin:		; void api_linewin(int win, int x0, int y0, int x1, int y1, int col);
   155 00000122 57                              	PUSH EDI
   156 00000123 56                              	PUSH ESI
   157 00000124 55                              	PUSH EBP
   158 00000125 53                              	PUSH EBX
   159 00000126 BA 0000000D                     	MOV	EDX, 13
   160 0000012B 8B 5C 24 14                     	MOV	EBX, [ESP + 20]	; win
   161 0000012F 8B 44 24 18                     	MOV	EAX, [ESP + 24]	; x0
   162 00000133 8B 4C 24 1C                     	MOV	ECX, [ESP + 28]	; y0
   163 00000137 8B 74 24 20                     	MOV	ESI, [ESP + 32]	; x1
   164 0000013B 8B 7C 24 24                     	MOV	EDI, [ESP + 36]	; y1
   165 0000013F 8B 6C 24 28                     	MOV	EBP, [ESP + 40]	; col
   166 00000143 CD 40                           	INT	0x40
   167 00000145 5B                              	POP	EBX
   168 00000146 5D                              	POP	EBP
   169 00000147 5E                              	POP	ESI
   170 00000148 5F                              	POP	EDI
   171 00000149 C3                              	RET
   172 0000014A                                 
   173 0000014A                                 _api_closewin:		; void api_closewin(int win)
   174 0000014A 53                                  PUSH EBX
   175 0000014B BA 0000000E                     	MOV	EDX, 14
   176 00000150 8B 5C 24 08                     	MOV	EBX, [ESP + 8]	; Win
   177 00000154 CD 40                           	INT 0x40
   178 00000156 5B                              	POP	EBX
   179 00000157 C3                              	RET
   180 00000158                                 
   181 00000158                                 _api_getkey: 		; int appi_getkey(int mode)
   182 00000158 BA 0000000F                         MOV EDX, 15
   183 0000015D 8B 44 24 04                     	MOV	EAX, [ESP + 4]
   184 00000161 CD 40                           	INT 0x40
   185 00000163 C3                              	RET
   186 00000164                                 
   187 00000164                                 _api_alloctimer:	; int api_alloctimer(void);
   188 00000164 BA 00000010                     	MOV	EDX, 16
   189 00000169 CD 40                           	INT	0x40
   190 0000016B C3                              	RET
   191 0000016C                                 
   192 0000016C                                 _api_inittimer:		; void api_inittimer(int timer, int data);
   193 0000016C 53                              	PUSH EBX
   194 0000016D BA 00000011                     	MOV	EDX, 17
   195 00000172 8B 5C 24 08                     	MOV	EBX, [ESP + 8]		; timer
   196 00000176 8B 44 24 0C                     	MOV	EAX, [ESP + 12]		; data
   197 0000017A CD 40                           	INT	0x40
   198 0000017C 5B                              	POP	EBX
   199 0000017D C3                              	RET
   200 0000017E                                 
   201 0000017E                                 _api_settimer:		; void api_settimer(int timer, int time);
   202 0000017E 53                              	PUSH EBX
   203 0000017F BA 00000012                     	MOV	EDX,18
   204 00000184 8B 5C 24 08                     	MOV	EBX, [ESP + 8]		; timer
   205 00000188 8B 44 24 0C                     	MOV	EAX, [ESP + 12]		; time
   206 0000018C CD 40                           	INT	0x40
   207 0000018E 5B                              	POP	EBX
   208 0000018F C3                              	RET
   209 00000190                                 
   210 00000190                                 _api_freetimer:		; void api_freetimer(int timer);
   211 00000190 53                              	PUSH EBX
   212 00000191 BA 00000013                     	MOV	EDX, 19
   213 00000196 8B 5C 24 08                     	MOV	EBX, [ESP + 8]		; timer
   214 0000019A CD 40                           	INT	0x40
   215 0000019C 5B                              	POP	EBX
   216 0000019D C3                              	RET
   217 0000019E                                 
   218 0000019E                                 _api_beep:  		; void api_beep(int tone)
   219 0000019E BA 00000014                     	MOV	EDX, 20
   220 000001A3 8B 44 24 04                     	MOV EAX, [ESP + 4]
   221 000001A7 CD 40                           	INT 0x40
   222 000001A9 C3                              	RET
   223 000001AA                                 		
