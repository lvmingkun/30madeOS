     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [INSTRSET "i486p"]
     5 00000000                                 
     6  = 00000105                              VBEMODE	EQU	0x105			; 1024 x 768 x 8 bit 分辨率
     7  = 00280000                              BOTPAK EQU 0x00280000		; 加载 bootpack
     8  = 00100000                              DSKCAC EQU 0x00100000		; 磁盘缓存的位置
     9  = 00008000                              DSKCAC0	EQU	0x00008000		; 磁盘缓存的位置（实模式）
    10 00000000                                 
    11 00000000                                 ; 有关Boot_info
    12  = 00000FF0                              CYLS EQU 0X0ff0   ; 启动区设置
    13  = 00000FF1                              LEDS EQU 0X0ff1
    14  = 00000FF2                              VMODE EQU 0X0ff2  ; 设定颜色数目信息，颜色的位数等等
    15  = 00000FF4                              SCRNX EQU 0X0ff4  ; 分辨率的x
    16  = 00000FF6                              SCRNY EQU 0X0ff6  ; 分辨率的y
    17  = 00000FF8                              VRAM EQU 0X0ff8   ; 像缓冲区开始地址
    18 00000000                                 
    19                                          	ORG 0xc200 ; 程序最终被装载到内存的地址
    20 0000C200                                 ; 即0x8000 + 0x4200 = 0xc2000x8000 是内存存放软盘的地址，0x4200 是软盘存放文件的地方
    21 0000C200                                 
    22 0000C200                                 ; 确认VBE是否存在
    23 0000C200 B8 9000                             MOV AX, 0x9000
    24 0000C203 8E C0                           	MOV ES, AX
    25 0000C205 BF 0000                         	MOV DI, 0
    26 0000C208 B8 4F00                         	MOV AX, 0X4f00 ; 有vbe的话值会自动编程 0x004f
    27 0000C20B CD 10                           	INT 0x10       ; 取得的数据也是放在es:di中
    28 0000C20D 3D 004F                         	CMP AX, 0x004f
    29 0000C210 75 52                           	JNE scrn320
    30 0000C212                                 
    31 0000C212                                 ; 确认VBE版本，非 2.0 版本不能使用高分辨率
    32 0000C212 26 8B 45 04                         MOV AX, [ES:DI + 4]
    33 0000C216 3D 0200                         	CMP AX, 0x0200
    34 0000C219 72 49                           	JB scrn320
    35 0000C21B                                 
    36 0000C21B                                 ; 取得画面模式信息,这里的数据将会被放在es:di开始的 256 字节中
    37 0000C21B B9 0105                             MOV CX, VBEMODE
    38 0000C21E B8 4F01                         	MOV AX, 0x4f01
    39 0000C221 CD 10                           	INT 0x10
    40 0000C223 3D 004F                         	CMP AX, 0x004f
    41 0000C226 75 3C                           	JNE scrn320
    42 0000C228                                 
    43 0000C228                                 ; 画面模式信息确认
    44 0000C228 26 80 7D 19 08                      CMP BYTE [ES:DI + 0x19], 8
    45 0000C22D 75 35                           	JNE scrn320
    46 0000C22F 26 80 7D 1B 04                  	CMP BYTE [ES:DI + 0x1b], 4
    47 0000C234 75 2E                           	JNE scrn320
    48 0000C236 26 8B 05                        	MOV AX, [ES:DI + 0x00]
    49 0000C239 25 0080                         	AND AX, 0x0080 
    50 0000C23C 74 26                           	JZ  scrn320
    51 0000C23E                                 
    52 0000C23E                                 ; 画面模式切换
    53 0000C23E BB 4105                             MOV BX, VBEMODE + 0x4000 
    54 0000C241 B8 4F02                         	mov AX, 0x4f02
    55 0000C244 CD 10                               int 0x10
    56 0000C246 C6 06 0FF2 08                       mov byte [VMODE], 8     ; 屏幕的模式（参考C语言的引用）
    57 0000C24B 26 8B 45 12                     	MOV	AX, [ES:DI + 0x12]
    58 0000C24F A3 0FF4                         	MOV	[SCRNX], AX
    59 0000C252 26 8B 45 14                     	MOV	AX, [ES:DI + 0x14]
    60 0000C256 A3 0FF6                         	MOV	[SCRNY], AX
    61 0000C259 66 26 8B 45 28                  	MOV	EAX, [ES:DI + 0x28]
    62 0000C25E 66 A3 0FF8                      	MOV	[VRAM], EAX
    63 0000C262 EB 20                           	JMP	keystatus
    64 0000C264                                 
    65 0000C264                                 scrn320:
    66 0000C264 B0 13                           	MOV	AL, 0x13			; VGA模式， 320 x 200
    67 0000C266 B4 00                           	MOV	AH, 0x00
    68 0000C268 CD 10                           	INT	0x10
    69 0000C26A C6 06 0FF2 08                   	MOV	BYTE [VMODE], 8	    ; 记下画面模式，参考c
    70 0000C26F C7 06 0FF4 0140                 	MOV	WORD [SCRNX], 320
    71 0000C275 C7 06 0FF6 00C8                 	MOV	WORD [SCRNY], 200
    72 0000C27B 66 C7 06 0FF8 000A0000          	MOV	DWORD [VRAM], 0x000a0000
    73 0000C284                                 	
    74 0000C284                                 keystatus:
    75 0000C284                                 ; 用BIOS取得键盘上各种LED指示灯的状态
    76 0000C284 B4 02                               mov ah, 0x02 
    77 0000C286 CD 16                               int 0x16 ; 键盘BIOS
    78 0000C288 A2 0FF1                             mov [LEDS], al
    79 0000C28B                                 
    80 0000C28B                                 ; 防止PIC接受所有中断
    81 0000C28B                                 ; AT兼容机的规范、PIC初始化
    82 0000C28B                                 ; 然后之前在CLI不做任何事就挂起
    83 0000C28B                                 ; PIC在同意后初始化
    84 0000C28B                                 
    85 0000C28B B0 FF                           	MOV	AL, 0xff			; 通过向pic的端口 0x21 和 0xa1 写入 0xff 来禁止所有中断
    86 0000C28D E6 21                           	OUT	0x21, AL
    87 0000C28F 90                              	NOP						; 连续执行OUT指令有些机种无法运行
    88 0000C290 E6 A1                           	OUT	0xa1, AL
    89 0000C292                                 
    90 0000C292 FA                              	CLI						; 进一步中断CPU
    91 0000C293                                 
    92 0000C293                                 ; 让CPU支持 1M 以上内存、设置A20GATE
    93 0000C293 E8 00B5                         	CALL	waitkbdout
    94 0000C296 B0 D1                           	MOV		AL, 0xd1
    95 0000C298 E6 64                           	OUT		0x64, AL
    96 0000C29A E8 00AE                         	CALL	waitkbdout
    97 0000C29D B0 DF                           	MOV		AL, 0xdf			; enable A20
    98 0000C29F E6 60                           	OUT		0x60, AL
    99 0000C2A1 E8 00A7                         	CALL	waitkbdout
   100 0000C2A4                                 
   101 0000C2A4                                 ; 保护模式转换
   102 0000C2A4                                 
   103 0000C2A4                                 [INSTRSET "i486p"]				; 说明使用 486 指令
   104 0000C2A4                                 
   105 0000C2A4 0F 01 16 C38A                   	LGDT [GDTR0]				; 设置临时GDT
   106 0000C2A9 0F 20 C0                        	MOV	EAX, CR0
   107 0000C2AC 66 25 7FFFFFFF                  	AND	EAX, 0x7fffffff			; 使用bit 31（禁用分页）
   108 0000C2B2 66 83 C8 01                     	OR	EAX, 0x00000001			; bit 0 到 1 转换（保护模式过渡）
   109 0000C2B6 0F 22 C0                        	MOV	CR0, EAX
   110 0000C2B9 EB 00                           	JMP	pipelineflush
   111 0000C2BB                                 
   112 0000C2BB                                 pipelineflush:
   113 0000C2BB B8 0008                         	MOV	AX, 1 * 8				;  写32bit的段
   114 0000C2BE 8E D8                           	MOV	DS, AX
   115 0000C2C0 8E C0                           	MOV	ES, AX
   116 0000C2C2 8E E0                           	MOV	FS, AX
   117 0000C2C4 8E E8                           	MOV	GS, AX
   118 0000C2C6 8E D0                           	MOV	SS, AX
   119 0000C2C8                                 
   120 0000C2C8                                 ; bootpack传递
   121 0000C2C8                                 
   122 0000C2C8 66 BE 0000C390                  	MOV	ESI, bootpack	; 源
   123 0000C2CE 66 BF 00280000                  	MOV	EDI, BOTPAK		; 目标
   124 0000C2D4 66 B9 00020000                  	MOV	ECX, 512 * 1024 / 4
   125 0000C2DA E8 0075                         	CALL memcpy
   126 0000C2DD                                 
   127 0000C2DD                                 ; 传输磁盘数据
   128 0000C2DD                                 
   129 0000C2DD                                 ; 从引导区开始
   130 0000C2DD                                 
   131 0000C2DD 66 BE 00007C00                  	MOV	ESI, 0x7c00		; 源
   132 0000C2E3 66 BF 00100000                  	MOV	EDI, DSKCAC		; 目标
   133 0000C2E9 66 B9 00000080                  	MOV	ECX, 512 / 4
   134 0000C2EF E8 0060                         	CALL memcpy
   135 0000C2F2                                 
   136 0000C2F2                                 ; 剩余的全部
   137 0000C2F2                                 
   138 0000C2F2 66 BE 00008200                  	MOV	ESI, DSKCAC0 + 512	; 源
   139 0000C2F8 66 BF 00100200                  	MOV	EDI, DSKCAC+512		; 目标
   140 0000C2FE 66 B9 00000000                  	MOV	ECX, 0
   141 0000C304 8A 0E 0FF0                      	MOV	CL, BYTE [CYLS]
   142 0000C308 66 69 C9 00001200               	IMUL ECX, 512 * 18 * 2 / 4	; 除以 4 得到字节数
   143 0000C30F 66 81 E9 00000080               	SUB	ECX, 512 / 4			; IPL 偏移量
   144 0000C316 E8 0039                         	CALL memcpy
   145 0000C319                                 
   146 0000C319                                 ; 由于还需要 asmhead 才能完成
   147 0000C319                                 ; 完成其余的 bootpack 任务
   148 0000C319                                 
   149 0000C319                                 ; bootpack启动
   150 0000C319                                 
   151 0000C319 66 BB 00280000                  	MOV	EBX, BOTPAK
   152 0000C31F 67 66 8B 4B 10                  	MOV	ECX, [EBX + 16]
   153 0000C324 66 83 C1 03                     	ADD	ECX, 3			; ECX += 3;
   154 0000C328 66 C1 E9 02                     	SHR	ECX, 2			; ECX /= 4;
   155 0000C32C 74 10                           	JZ skip				; 传输完成
   156 0000C32E 67 66 8B 73 14                  	MOV	ESI, [EBX + 20]	; 源
   157 0000C333 66 01 DE                        	ADD	ESI, EBX
   158 0000C336 67 66 8B 7B 0C                  	MOV	EDI, [EBX + 12]	; 目标
   159 0000C33B E8 0014                         	CALL memcpy
   160 0000C33E                                 
   161 0000C33E                                 skip:
   162 0000C33E 67 66 8B 63 0C                  	MOV	ESP, [EBX + 12]	; 堆栈的初始化
   163 0000C343 66 EA 0000001B 0010             	JMP	DWORD 2*8:0x0000001b
   164 0000C34B                                 
   165 0000C34B                                 waitkbdout:
   166 0000C34B E4 64                           	IN AL, 0x64
   167 0000C34D 24 02                           	AND	AL, 0x02
   168 0000C34F 75 FA                           	JNZ	waitkbdout		; AND 结果不为 0 跳转到 waitkbdout
   169 0000C351 C3                              	RET
   170 0000C352                                 
   171 0000C352                                 memcpy:
   172 0000C352 67 66 8B 06                     	MOV	EAX, [ESI]
   173 0000C356 66 83 C6 04                     	ADD	ESI, 4
   174 0000C35A 67 66 89 07                     	MOV	[EDI], EAX
   175 0000C35E 66 83 C7 04                     	ADD	EDI, 4
   176 0000C362 66 83 E9 01                     	SUB	ECX, 1
   177 0000C366 75 EA                           	JNZ	memcpy			; 运算结果不为 0 跳转到memcpy
   178 0000C368 C3                              	RET
   179 0000C369                                 ; memcpy地址前缀大小
   180 0000C369                                 
   181 0000C369 00 00 00 00 00 00 00            ALIGNB 16
   182 0000C370                                 GDT0:
   183 0000C370 00 00 00 00 00 00 00 00         	RESB 8								; 初始值
   184 0000C378 FFFF 0000 9200 00CF             	DW 0xffff, 0x0000, 0x9200, 0x00cf	; 写 32 bit位段寄存器
   185 0000C380 FFFF 0000 9A28 0047             	DW 0xffff, 0x0000, 0x9a28, 0x0047	; 可执行的文件的 32 bit寄存器（bootpack用）
   186 0000C388                                 
   187 0000C388 0000                            	DW 0
   188 0000C38A                                 
   189 0000C38A                                 GDTR0:
   190 0000C38A 0017                            	DW 8 * 3 - 1
   191 0000C38C 0000C370                        	DD GDT0
   192 0000C390                                 
   193 0000C390                                 	ALIGNB 16
   194 0000C390                                 bootpack: