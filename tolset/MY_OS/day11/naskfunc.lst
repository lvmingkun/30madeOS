     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]    ;制作的目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]  ;告诉汇编编译器，这个是给486使用的，而不是8086 即可以识别到寄存器EAX
     6 00000000                                 [BITS 32]           ;制作32位的机器语言模式
     7 00000000                                 [FILE "naskfunc.nas"]   ;源文件名信息
     8 00000000                                 
     9 00000000                                 ;制作具体的函数库
    10 00000000                                          
    11 00000000                                          GLOBAL _write_mem8    ;程序中包含的函数名，一定要以_开头，为了衔接c语言的函数库
    12 00000000                                          GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt
    13 00000000                                          GLOBAL _io_in8, _io_in16, _io_in32
    14 00000000                                          GLOBAL _io_out8, _io_out16, _io_out32
    15 00000000                                          GLOBAL _io_load_eflags, _io_store_eflags
    16 00000000                                 		 GLOBAL _load_gdtr, _load_idtr
    17 00000000                                 		 GLOBAL	_load_cr0, _store_cr0
    18 00000000                                          GLOBAL _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    19 00000000                                 		 GLOBAL	_memtest_sub
    20 00000000                                 		 EXTERN	_inthandler21, _inthandler27, _inthandler2c
    21 00000000                                 
    22 00000000                                 
    23 00000000                                 ; 以下是实际的函数内容
    24                                          [SECTION .text]          ;目标文件中写了这些之后再写程序
    25 00000000                                 
    26 00000000                                 _write_mem8: ; void wirte_mem8(int addr, int data);
    27 00000000 8B 4C 24 04                              mov ECX,[esp+4]   ;[ESP+4]中存放的是地址，将其读入搭配ecx中
    28 00000004 8A 44 24 08                              mov al,[esp+8]    ;[esp+8]中存放的是数据，将其放入al中
    29 00000008 88 01                                    mov [ECX],al
    30 0000000A C3                                       RET
    31 0000000B                                 
    32 0000000B                                 _io_hlt:   ;void io_hlt(void);
    33 0000000B F4                                       HLT 
    34 0000000C C3                                       RET
    35 0000000D                                 
    36 0000000D                                 _io_cli: ;void io_cli(void)
    37 0000000D FA                                       CLI 
    38 0000000E C3                                       RET
    39 0000000F                                         
    40 0000000F                                 _io_sti: ;void io_sti(void)
    41 0000000F FB                                       STI 
    42 00000010 C3                                       RET
    43 00000011                                         
    44 00000011                                 _io_stihlt: ;void io_stihld(void)
    45 00000011 FB                                       STI
    46 00000012 F4                                       HLT
    47 00000013 C3                                       RET
    48 00000014                                 
    49 00000014                                 _io_in8: ;int io_in8(int port)
    50 00000014 8B 54 24 04                              mov edx,[esp+4]
    51 00000018 B8 00000000                              mov eax,0
    52 0000001D EC                                       in  al,dx  ;将dx端口的数据读8字节到al中，下面的同理
    53 0000001E C3                                       RET
    54 0000001F                                 
    55 0000001F                                 _io_in16: ;int io_in16(int port)
    56 0000001F 8B 54 24 04                              mov edx,[esp+4]
    57 00000023 B8 00000000                              mov eax,0
    58 00000028 66 ED                                    in  ax,dx
    59 0000002A C3                                       RET
    60 0000002B                                 
    61 0000002B                                 _io_in32: ;int io_in32(int port)
    62 0000002B 8B 54 24 04                              mov edx,[esp+4]
    63 0000002F ED                                       in  eax,dx
    64 00000030 C3                                       RET
    65 00000031                                 
    66 00000031                                 _io_out8: ;void io_out8(int port ,int data)
    67 00000031 8B 54 24 04                              mov edx,[esp+4] ;port
    68 00000035 8A 44 24 08                              mov al,[esp+8]  ;data
    69 00000039 EE                                       out dx,al       ;将al的数据写到dx这个端口
    70 0000003A C3                                       RET    
    71 0000003B                                 
    72 0000003B                                 _io_out16:  ;void io_out16(int port ,int data)
    73 0000003B 8B 54 24 04                              mov edx,[esp+4] ;port
    74 0000003F 66 8B 44 24 08                           mov ax,[esp+8]  ;data
    75 00000044 66 EF                                    out dx,ax       
    76 00000046 C3                                       RET 
    77 00000047                                 
    78 00000047                                 _io_out32:  ;void io_out32(int port ,int data)
    79 00000047 8B 54 24 04                              mov edx,[esp+4] ;port
    80 0000004B 8B 44 24 08                              mov eax,[esp+8]  ;data
    81 0000004F EF                                       out dx,eax      
    82 00000050 C3                                       RET 
    83 00000051                                 
    84 00000051                                 _io_load_eflags: ;int io_load_eflags(void)
    85 00000051 9C                                       pushfd   ;指push flag寄存器
    86 00000052 58                                       pop eax   ;这里解释一下：函数的返回值，在汇编中是由：char型 AL ； int型　AX
    87 00000053 C3                                       RET
    88 00000054                                 
    89 00000054                                 _io_store_eflags: ; void io_store_flags(int flags)
    90 00000054 8B 44 24 04                              mov eax,[esp+4]
    91 00000058 50                                       push eax
    92 00000059 9D                                       popfd
    93 0000005A C3                                       RET
    94 0000005B                                 
    95 0000005B                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    96 0000005B 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    97 00000060 66 89 44 24 06                  		MOV		[ESP+6],AX
    98 00000065 0F 01 54 24 06                  		LGDT	[ESP+6]
    99 0000006A C3                              		RET
   100 0000006B                                 
   101 0000006B                                 _load_idtr:		; void load_idtr(int limit, int addr);
   102 0000006B 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   103 00000070 66 89 44 24 06                  		MOV		[ESP+6],AX
   104 00000075 0F 01 5C 24 06                  		LIDT	[ESP+6]
   105 0000007A C3                              		RET
   106 0000007B                                 
   107 0000007B                                 _asm_inthandler21:
   108 0000007B 06                              	PUSH	ES
   109 0000007C 1E                              	PUSH	DS
   110 0000007D 60                              	PUSHAD
   111 0000007E 89 E0                           	MOV	EAX,ESP
   112 00000080 50                              	PUSH	EAX
   113 00000081 66 8C D0                        	MOV	AX,SS     ;以下三步是c规定的，必须相同 ss es ds
   114 00000084 8E D8                           	MOV	DS,AX
   115 00000086 8E C0                           	MOV	ES,AX
   116 00000088 E8 [00000000]                   	CALL	_inthandler21
   117 0000008D 58                              	POP	EAX
   118 0000008E 61                              	POPAD
   119 0000008F 1F                              	POP	DS
   120 00000090 07                              	POP	ES
   121 00000091 CF                              	IRETD
   122 00000092                                 
   123 00000092                                 _asm_inthandler27:
   124 00000092 06                              	PUSH	ES
   125 00000093 1E                              	PUSH	DS
   126 00000094 60                              	PUSHAD
   127 00000095 89 E0                           	MOV	EAX,ESP
   128 00000097 50                              	PUSH	EAX
   129 00000098 66 8C D0                        	MOV	AX,SS
   130 0000009B 8E D8                           	MOV	DS,AX
   131 0000009D 8E C0                           	MOV	ES,AX
   132 0000009F E8 [00000000]                   	CALL	_inthandler27
   133 000000A4 58                              	POP	EAX
   134 000000A5 61                              	POPAD
   135 000000A6 1F                              	POP	DS
   136 000000A7 07                              	POP	ES
   137 000000A8 CF                              	IRETD
   138 000000A9                                 
   139 000000A9                                 _asm_inthandler2c:
   140 000000A9 06                              	PUSH	ES
   141 000000AA 1E                              	PUSH	DS
   142 000000AB 60                              	PUSHAD
   143 000000AC 89 E0                           	MOV	EAX,ESP
   144 000000AE 50                              	PUSH	EAX
   145 000000AF 66 8C D0                        	MOV	AX,SS
   146 000000B2 8E D8                           	MOV	DS,AX
   147 000000B4 8E C0                           	MOV	ES,AX
   148 000000B6 E8 [00000000]                   	CALL	_inthandler2c
   149 000000BB 58                              	POP	EAX
   150 000000BC 61                              	POPAD
   151 000000BD 1F                              	POP	DS
   152 000000BE 07                              	POP	ES
   153 000000BF CF                              	IRETD
   154 000000C0                                 
   155 000000C0                                 _load_cr0: ;int load_cro(void)
   156 000000C0 0F 20 C0                                mov eax,cr0 
   157 000000C3 C3                                      RET
   158 000000C4                                 
   159 000000C4                                 _store_cr0: ;void load_cro(int cr0)
   160 000000C4 8B 44 24 04                             mov EAX,[esp+4]
   161 000000C8 0F 22 C0                                mov cr0,EAX
   162 000000CB C3                                      RET  
   163 000000CC                                 
   164 000000CC                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   165 000000CC 57                              	PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   166 000000CD 56                              	PUSH	ESI
   167 000000CE 53                              	PUSH	EBX
   168 000000CF BE AA55AA55                     	MOV	ESI, 0xaa55aa55			; pat0 = 0xaa55aa55;
   169 000000D4 BF 55AA55AA                     	MOV	EDI, 0x55aa55aa			; pat1 = 0x55aa55aa;
   170 000000D9 8B 44 24 10                     	MOV	EAX, [ESP+12+4]			; i = start;
   171 000000DD                                 
   172 000000DD                                 mts_loop:
   173 000000DD 89 C3                           	MOV	EBX,EAX
   174 000000DF 81 C3 00000FFC                  	ADD	EBX,0xffc				; p = i + 0xffc;
   175 000000E5 8B 13                           	MOV	EDX,[EBX]				; old = *p;
   176 000000E7 89 33                           	MOV	[EBX],ESI				; *p = pat0;
   177 000000E9 83 33 FF                        	XOR	DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   178 000000EC 3B 3B                           	CMP	EDI,[EBX]				; if (*p != pat1) goto fin;
   179 000000EE 75 18                           	JNE	mts_fin
   180 000000F0 83 33 FF                        	XOR	DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   181 000000F3 3B 33                           	CMP	ESI,[EBX]				; if (*p != pat0) goto fin;
   182 000000F5 75 11                           	JNE	mts_fin
   183 000000F7 89 13                           	MOV	[EBX],EDX				; *p = old;
   184 000000F9 05 00001000                     	ADD	EAX,0x1000				; i += 0x1000;
   185 000000FE 3B 44 24 14                     	CMP	EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   186 00000102 76 D9                           	JBE	mts_loop
   187 00000104 5B                              	POP	EBX
   188 00000105 5E                              	POP	ESI
   189 00000106 5F                              	POP	EDI
   190 00000107 C3                              	RET
   191 00000108                                 
   192 00000108                                 mts_fin:
   193 00000108 89 13                           	MOV	[EBX],EDX				; *p = old;
   194 0000010A 5B                              	POP	EBX
   195 0000010B 5E                              	POP	ESI
   196 0000010C 5F                              	POP	EDI
   197 0000010D C3                              	RET
