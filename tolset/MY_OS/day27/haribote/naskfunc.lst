     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]    ; 制作的目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]  ; 告诉汇编编译器，这个是给 486 使用的，而不是 8086 即可以识别到寄存器EAX
     6 00000000                                 [BITS 32]           ; 制作 32 位的机器语言模式
     7 00000000                                 [FILE "naskfunc.nas"]   ; 源文件名信息
     8 00000000                                 
     9 00000000                                 ; 制作具体的函数库
    10 00000000                                          
    11 00000000                                     GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt
    12 00000000                                     GLOBAL _io_in8, _io_in16, _io_in32
    13 00000000                                     GLOBAL _io_out8, _io_out16, _io_out32
    14 00000000                                     GLOBAL _io_load_eflags, _io_store_eflags
    15 00000000                                 	GLOBAL _load_gdtr, _load_idtr
    16 00000000                                 	GLOBAL	_load_cr0, _store_cr0
    17 00000000                                     GLOBAL _asm_inthandler20, _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    18 00000000                                 	GLOBAL _asm_inthandler0c, _asm_inthandler0d
    19 00000000                                 	GLOBAL _load_tr, _farjmp, _farcall
    20 00000000                                 	GLOBAL	_memtest_sub, _asm_end_app
    21 00000000                                 	GLOBAL _asm_hrb_api, _start_app
    22 00000000                                 	EXTERN	_inthandler20, _inthandler21, _inthandler27, _inthandler2c, _inthandler0d, _inthandler0c
    23 00000000                                 	EXTERN	_hrb_api
    24 00000000                                 
    25 00000000                                 
    26 00000000                                 ; 以下是实际的函数内容
    27                                          [SECTION .text]          ; 目标文件中写了这些之后再写程序
    28 00000000                                 
    29 00000000                                 _io_hlt:   ; void io_hlt(void);
    30 00000000 F4                                  HLT 
    31 00000001 C3                                  RET
    32 00000002                                 
    33 00000002                                 _io_cli: ;void io_cli(void)
    34 00000002 FA                                  CLI 
    35 00000003 C3                                  RET
    36 00000004                                         
    37 00000004                                 _io_sti: ; void io_sti(void)
    38 00000004 FB                                  STI 
    39 00000005 C3                                  RET
    40 00000006                                         
    41 00000006                                 _io_stihlt: ; void io_stihld(void)
    42 00000006 FB                                  STI
    43 00000007 F4                                  HLT
    44 00000008 C3                                  RET
    45 00000009                                 
    46 00000009                                 _io_in8: ; int io_in8(int port)
    47 00000009 8B 54 24 04                         mov edx, [esp + 4]
    48 0000000D B8 00000000                         mov eax, 0
    49 00000012 EC                                  in  al, dx  ; 将dx端口的数据读8字节到al中，下面的同理
    50 00000013 C3                                  RET
    51 00000014                                 
    52 00000014                                 _io_in16: ; int io_in16(int port)
    53 00000014 8B 54 24 04                         mov edx, [esp + 4]
    54 00000018 B8 00000000                         mov eax, 0
    55 0000001D 66 ED                               in  ax, dx
    56 0000001F C3                                  RET
    57 00000020                                 
    58 00000020                                 _io_in32: ; int io_in32(int port)
    59 00000020 8B 54 24 04                         mov edx, [esp + 4]
    60 00000024 ED                                  in  eax, dx
    61 00000025 C3                                  RET
    62 00000026                                 
    63 00000026                                 _io_out8: ; void io_out8(int port , int data)
    64 00000026 8B 54 24 04                         mov edx, [esp + 4] ; port
    65 0000002A 8A 44 24 08                         mov al, [esp + 8]  ; data
    66 0000002E EE                                  out dx, al       ; 将al的数据写到dx这个端口
    67 0000002F C3                                  RET    
    68 00000030                                 
    69 00000030                                 _io_out16:  ; void io_out16(int port , int data)
    70 00000030 8B 54 24 04                         mov edx, [esp + 4] ; port
    71 00000034 66 8B 44 24 08                      mov ax,[esp + 8]  ; data
    72 00000039 66 EF                               out dx, ax       
    73 0000003B C3                                  RET 
    74 0000003C                                 
    75 0000003C                                 _io_out32:  ; void io_out32(int port , int data)
    76 0000003C 8B 54 24 04                         mov edx, [esp + 4] ; port
    77 00000040 8B 44 24 08                         mov eax, [esp + 8]  ; data
    78 00000044 EF                                  out dx, eax      
    79 00000045 C3                                  RET 
    80 00000046                                 
    81 00000046                                 _io_load_eflags: ; int io_load_eflags(void)
    82 00000046 9C                                  pushfd   ; 指push flag寄存器
    83 00000047 58                                  pop eax   ; 这里解释一下：函数的返回值，在汇编中是由：char型 AL ； int型　AX
    84 00000048 C3                                  RET
    85 00000049                                 
    86 00000049                                 _io_store_eflags: ; void io_store_flags(int flags)
    87 00000049 8B 44 24 04                         mov eax, [esp + 4]
    88 0000004D 50                                  push eax
    89 0000004E 9D                                  popfd
    90 0000004F C3                                  RET
    91 00000050                                 
    92 00000050                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    93 00000050 66 8B 44 24 04                  	MOV	AX, [ESP + 4]		; limit
    94 00000055 66 89 44 24 06                  	MOV	[ESP + 6], AX
    95 0000005A 0F 01 54 24 06                  	LGDT [ESP + 6]
    96 0000005F C3                              	RET
    97 00000060                                 
    98 00000060                                 _load_idtr:		; void load_idtr(int limit, int addr);
    99 00000060 66 8B 44 24 04                  	MOV	AX, [ESP + 4]		; limit
   100 00000065 66 89 44 24 06                  	MOV	[ESP + 6], AX
   101 0000006A 0F 01 5C 24 06                  	LIDT [ESP + 6]
   102 0000006F C3                              	RET
   103 00000070                                 
   104 00000070                                 _asm_inthandler0c:
   105 00000070 FB                              	STI
   106 00000071 06                              	PUSH ES
   107 00000072 1E                              	PUSH DS
   108 00000073 60                              	PUSHAD
   109 00000074 89 E0                           	MOV	EAX, ESP
   110 00000076 50                              	PUSH EAX
   111 00000077 66 8C D0                        	MOV	AX, SS
   112 0000007A 8E D8                           	MOV	DS, AX
   113 0000007C 8E C0                           	MOV	ES, AX
   114 0000007E E8 [00000000]                   	CALL _inthandler0c
   115 00000083 83 F8 00                        	CMP	EAX, 0		
   116 00000086 0F 85 00000103                  	JNE	_asm_end_app	
   117 0000008C 58                              	POP	EAX
   118 0000008D 61                              	POPAD
   119 0000008E 1F                              	POP	DS
   120 0000008F 07                              	POP	ES
   121 00000090 83 C4 04                        	ADD	ESP, 4		; INT 0x0d 需要这句
   122 00000093 CF                              	IRETD
   123 00000094                                 
   124 00000094                                 _asm_inthandler0d:
   125 00000094 FB                              	STI
   126 00000095 06                              	PUSH ES
   127 00000096 1E                              	PUSH DS
   128 00000097 60                              	PUSHAD
   129 00000098 89 E0                           	MOV	EAX, ESP
   130 0000009A 50                              	PUSH EAX
   131 0000009B 66 8C D0                        	MOV	AX, SS
   132 0000009E 8E D8                           	MOV	DS, AX
   133 000000A0 8E C0                           	MOV	ES, AX
   134 000000A2 E8 [00000000]                   	CALL _inthandler0d
   135 000000A7 83 F8 00                        	CMP	EAX, 0		
   136 000000AA 0F 85 000000DF                  	JNE	_asm_end_app
   137 000000B0 58                              	POP	EAX
   138 000000B1 61                              	POPAD
   139 000000B2 1F                              	POP	DS
   140 000000B3 07                              	POP	ES
   141 000000B4 83 C4 04                        	ADD	ESP, 4		; INT 0x0d 需要这句
   142 000000B7 CF                              	IRETD
   143 000000B8                                 
   144 000000B8                                 _asm_inthandler20:
   145 000000B8 06                              	PUSH ES
   146 000000B9 1E                              	PUSH DS
   147 000000BA 60                              	PUSHAD
   148 000000BB 89 E0                           	MOV	EAX, ESP
   149 000000BD 50                              	PUSH EAX
   150 000000BE 66 8C D0                        	MOV	AX, SS     ; 以下三步是c规定的，必须相同 ss es ds
   151 000000C1 8E D8                           	MOV	DS, AX
   152 000000C3 8E C0                           	MOV	ES, AX
   153 000000C5 E8 [00000000]                   	CALL _inthandler20
   154 000000CA 58                              	POP	EAX
   155 000000CB 61                              	POPAD
   156 000000CC 1F                              	POP	DS
   157 000000CD 07                              	POP	ES
   158 000000CE CF                              	IRETD
   159 000000CF                                 
   160 000000CF                                 _asm_inthandler21:
   161 000000CF 06                              	PUSH ES
   162 000000D0 1E                              	PUSH DS
   163 000000D1 60                              	PUSHAD
   164 000000D2 89 E0                           	MOV	EAX, ESP
   165 000000D4 50                              	PUSH EAX
   166 000000D5 66 8C D0                        	MOV	AX, SS     ; 以下三步是c规定的，必须相同 ss es ds
   167 000000D8 8E D8                           	MOV	DS, AX
   168 000000DA 8E C0                           	MOV	ES, AX
   169 000000DC E8 [00000000]                   	CALL _inthandler21
   170 000000E1 58                              	POP	EAX
   171 000000E2 61                              	POPAD
   172 000000E3 1F                              	POP	DS
   173 000000E4 07                              	POP	ES
   174 000000E5 CF                              	IRETD
   175 000000E6                                 
   176 000000E6                                 _asm_inthandler27:
   177 000000E6 06                              	PUSH ES
   178 000000E7 1E                              	PUSH DS
   179 000000E8 60                              	PUSHAD
   180 000000E9 89 E0                           	MOV	EAX, ESP
   181 000000EB 50                              	PUSH EAX
   182 000000EC 66 8C D0                        	MOV	AX, SS
   183 000000EF 8E D8                           	MOV	DS, AX
   184 000000F1 8E C0                           	MOV	ES, AX
   185 000000F3 E8 [00000000]                   	CALL _inthandler27
   186 000000F8 58                              	POP	EAX
   187 000000F9 61                              	POPAD
   188 000000FA 1F                              	POP	DS
   189 000000FB 07                              	POP	ES
   190 000000FC CF                              	IRETD
   191 000000FD                                 
   192 000000FD                                 _asm_inthandler2c:
   193 000000FD 06                              	PUSH ES
   194 000000FE 1E                              	PUSH DS
   195 000000FF 60                              	PUSHAD
   196 00000100 89 E0                           	MOV	EAX, ESP
   197 00000102 50                              	PUSH EAX
   198 00000103 66 8C D0                        	MOV	AX, SS
   199 00000106 8E D8                           	MOV	DS, AX
   200 00000108 8E C0                           	MOV	ES, AX
   201 0000010A E8 [00000000]                   	CALL _inthandler2c
   202 0000010F 58                              	POP	EAX
   203 00000110 61                              	POPAD
   204 00000111 1F                              	POP	DS
   205 00000112 07                              	POP	ES
   206 00000113 CF                              	IRETD
   207 00000114                                 
   208 00000114                                 _load_cr0: ; int load_cro(void)
   209 00000114 0F 20 C0                                mov eax, cr0 
   210 00000117 C3                                      RET
   211 00000118                                 
   212 00000118                                 _store_cr0: ; void load_cro(int cr0)
   213 00000118 8B 44 24 04                             mov EAX, [esp + 4]
   214 0000011C 0F 22 C0                                mov cr0, EAX
   215 0000011F C3                                      RET  
   216 00000120                                 
   217 00000120                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   218 00000120 57                              	PUSH	EDI
   219 00000121 56                              	PUSH	ESI
   220 00000122 53                              	PUSH	EBX
   221 00000123 BE AA55AA55                     	MOV	ESI, 0xaa55aa55			; pat0 = 0xaa55aa55;
   222 00000128 BF 55AA55AA                     	MOV	EDI, 0x55aa55aa			; pat1 = 0x55aa55aa;
   223 0000012D 8B 44 24 10                     	MOV	EAX, [ESP + 12 + 4]			; i = start;
   224 00000131                                 
   225 00000131                                 mts_loop:
   226 00000131 89 C3                           	MOV	EBX, EAX
   227 00000133 81 C3 00000FFC                  	ADD	EBX, 0xffc				; p = i + 0xffc;
   228 00000139 8B 13                           	MOV	EDX, [EBX]				; old = *p;
   229 0000013B 89 33                           	MOV	[EBX], ESI				; *p = pat0;
   230 0000013D 83 33 FF                        	XOR	DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   231 00000140 3B 3B                           	CMP	EDI, [EBX]				; if (*p != pat1) goto fin;
   232 00000142 75 18                           	JNE	mts_fin
   233 00000144 83 33 FF                        	XOR	DWORD [EBX], 0xffffffff	; *p ^= 0xffffffff;
   234 00000147 3B 33                           	CMP	ESI, [EBX]				; if (*p != pat0) goto fin;
   235 00000149 75 11                           	JNE	mts_fin
   236 0000014B 89 13                           	MOV	[EBX], EDX				; *p = old;
   237 0000014D 05 00001000                     	ADD	EAX, 0x1000				; i += 0x1000;
   238 00000152 3B 44 24 14                     	CMP	EAX, [ESP + 12 + 8]		; if (i <= end) goto mts_loop;
   239 00000156 76 D9                           	JBE	mts_loop
   240 00000158 5B                              	POP	EBX
   241 00000159 5E                              	POP	ESI
   242 0000015A 5F                              	POP	EDI
   243 0000015B C3                              	RET
   244 0000015C                                 
   245 0000015C                                 mts_fin:
   246 0000015C 89 13                           	MOV	[EBX], EDX 		; *p = old;
   247 0000015E 5B                              	POP	EBX
   248 0000015F 5E                              	POP	ESI
   249 00000160 5F                              	POP	EDI
   250 00000161 C3                              	RET
   251 00000162                                 
   252 00000162                                 _load_tr: 				; void load_tr(int tr);
   253 00000162 0F 00 5C 24 04                  	LTR [esp + 4] 		; tr
   254 00000167 C3                              	RET
   255 00000168                                 
   256 00000168                                 _farjmp: 				; void farjmp(int eip, int cs);
   257 00000168 FF 6C 24 04                     	JMP far [esp + 4] 	; 高地址是cs，低地址是eip
   258 0000016C C3                              	RET
   259 0000016D                                 
   260 0000016D                                 _farcall: 				; void farcall(int eip, int cs)
   261 0000016D FF 5C 24 04                         CALL FAR [ESP + 4]
   262 00000171 C3                              	RET
   263 00000172                                 
   264 00000172                                 _asm_hrb_api:
   265 00000172 FB                              		STI
   266 00000173 1E                              		PUSH DS
   267 00000174 06                              		PUSH ES
   268 00000175 60                              		PUSHAD		; 用于保存的PUSH
   269 00000176 60                              		PUSHAD		; 用于向hrb_api传值的PUSH
   270 00000177 66 8C D0                        		MOV	AX, SS
   271 0000017A 8E D8                           		MOV	DS, AX  ; 将操作系统用段地址存入DS和ES
   272 0000017C 8E C0                           		MOV	ES, AX
   273 0000017E E8 [00000000]                   		CALL _hrb_api
   274 00000183 83 F8 00                        		CMP	EAX, 0  ; 当EAX不为 0 时程序结束
   275 00000186 75 07                           		JNE	_asm_end_app
   276 00000188 83 C4 20                        		ADD	ESP, 32
   277 0000018B 61                              		POPAD
   278 0000018C 07                              		POP	ES
   279 0000018D 1F                              		POP	DS
   280 0000018E CF                              		IRETD
   281 0000018F                                 
   282 0000018F                                 _asm_end_app:
   283 0000018F                                 		; EAX为tss.esp0的地址
   284 0000018F 8B 20                           		MOV	ESP,[EAX]
   285 00000191 C7 40 04 00000000               		MOV	DWORD [EAX + 4], 0
   286 00000198 61                              		POPAD
   287 00000199 C3                              		RET	; 返回cmd_app
   288 0000019A                                 
   289 0000019A                                 
   290 0000019A                                 ; 此时还在操作系统内部
   291 0000019A                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   292 0000019A 60                              		PUSHAD				; 将操作系统内部此时的32位寄存器值全部保存起来
   293 0000019B 8B 44 24 24                     		MOV	EAX, [ESP + 36]	; 导入应用程序用EIP
   294 0000019F 8B 4C 24 28                     		MOV	ECX, [ESP + 40]	; 应用程序用CS
   295 000001A3 8B 54 24 2C                     		MOV	EDX, [ESP + 44]	; 应用程序用ESP
   296 000001A7 8B 5C 24 30                     		MOV	EBX, [ESP + 48]	; 应用程序用DS/SS
   297 000001AB 8B 6C 24 34                     		MOV	EBP, [ESP + 52]	; tss.esp0的地址, 可参考task的定义
   298 000001AF 89 65 00                        		MOV	[EBP], ESP		; 保存操作系统用ESP，[ebp] 指向的是task->tss.esp
   299 000001B2 8C 55 04                        		MOV	[EBP + 4], SS	; 保存操作系统用SS, [ebp + 4] 指向的是task->tss.ss
   300 000001B5 8E C3                           		MOV	ES, BX			; 将DS/SS进行复制，且以防万一，也给其他寄存器值进行赋值
   301 000001B7 8E DB                           		MOV	DS, BX
   302 000001B9 8E E3                           		MOV	FS, BX
   303 000001BB 8E EB                           		MOV	GS, BX
   304 000001BD                                 ; 下面调整栈，以免用RETF跳转到应用程序
   305 000001BD 83 C9 03                        		OR	ECX, 3 			; 将应用程序用段号和3进行OR运算，以便后面跳转到应用程序段
   306 000001C0 83 CB 03                        		OR  EBX, 3 			; 将应用程序用段号和3进行OR运算
   307 000001C3 53                              		PUSH EBX			; 应用程序的SS
   308 000001C4 52                              		PUSH EDX			; 应用程序的ESP
   309 000001C5 51                              		PUSH ECX			; 应用程序的CS
   310 000001C6 50                              		PUSH EAX			; 应用程序的EIP
   311 000001C7 CB                              		RETF				;取得CS和EIP，然后跳转到应用程序的地址
   312 000001C8                                 ; 应用程序结束后不会回到这里，此时还剩与esp、ss、pushad的各个值
