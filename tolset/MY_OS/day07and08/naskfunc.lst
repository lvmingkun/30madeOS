     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]    ;制作的目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]  ;告诉汇编编译器，这个是给486使用的，而不是8086 即可以识别到寄存器EAX
     6 00000000                                 [BITS 32]           ;制作32位的机器语言模式
     7 00000000                                 [FILE "naskfunc.nas"]   ;源文件名信息
     8 00000000                                 
     9 00000000                                 ;制作具体的函数库
    10 00000000                                          
    11 00000000                                          GLOBAL         _write_mem8    ;程序中包含的函数名，一定要以_开头，为了衔接c语言的函数库
    12 00000000                                          GLOBAL         _io_hlt, _io_cli, _io_sti, _io_stihlt
    13 00000000                                          GLOBAL         _io_in8, _io_in16, _io_in32
    14 00000000                                          GLOBAL         _io_out8, _io_out16, _io_out32
    15 00000000                                          GLOBAL         _io_load_eflags, _io_store_eflags
    16 00000000                                 		 GLOBAL			_load_gdtr, _load_idtr
    17 00000000                                          GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    18 00000000                                 		 EXTERN	_inthandler21, _inthandler27, _inthandler2c
    19 00000000                                 
    20 00000000                                 
    21 00000000                                 ; 以下是实际的函数内容
    22                                          [SECTION .text]          ;目标文件中写了这些之后再写程序
    23 00000000                                 
    24 00000000                                 _write_mem8: ; void wirte_mem8(int addr, int data);
    25 00000000 8B 4C 24 04                              mov ECX,[esp+4]   ;[ESP+4]中存放的是地址，将其读入搭配ecx中
    26 00000004 8A 44 24 08                              mov al,[esp+8]    ;[esp+8]中存放的是数据，将其放入al中
    27 00000008 88 01                                    mov [ECX],al
    28 0000000A C3                                       RET
    29 0000000B                                 
    30 0000000B                                 _io_hlt:   ;void io_hlt(void);
    31 0000000B F4                                       HLT 
    32 0000000C C3                                       RET
    33 0000000D                                 
    34 0000000D                                 _io_cli: ;void io_cli(void)
    35 0000000D FA                                       CLI 
    36 0000000E C3                                       RET
    37 0000000F                                         
    38 0000000F                                 _io_sti: ;void io_sti(void)
    39 0000000F FB                                       STI 
    40 00000010 C3                                       RET
    41 00000011                                         
    42 00000011                                 _io_stihlt: ;void io_stihld(void)
    43 00000011 FB                                       STI
    44 00000012 F4                                       HLT
    45 00000013 C3                                       RET
    46 00000014                                 
    47 00000014                                 _io_in8: ;int io_in8(int port)
    48 00000014 8B 54 24 04                              mov edx,[esp+4]
    49 00000018 B8 00000000                              mov eax,0
    50 0000001D EC                                       in  al,dx  ;将dx端口的数据读8字节到al中，下面的同理
    51 0000001E C3                                       RET
    52 0000001F                                 
    53 0000001F                                 _io_in16: ;int io_in16(int port)
    54 0000001F 8B 54 24 04                              mov edx,[esp+4]
    55 00000023 B8 00000000                              mov eax,0
    56 00000028 66 ED                                    in  ax,dx
    57 0000002A C3                                       RET
    58 0000002B                                 
    59 0000002B                                 _io_in32: ;int io_in32(int port)
    60 0000002B 8B 54 24 04                              mov edx,[esp+4]
    61 0000002F ED                                       in  eax,dx
    62 00000030 C3                                       RET
    63 00000031                                 
    64 00000031                                 _io_out8: ;void io_out8(int port ,int data)
    65 00000031 8B 54 24 04                              mov edx,[esp+4] ;port
    66 00000035 8A 44 24 08                              mov al,[esp+8]  ;data
    67 00000039 EE                                       out dx,al       ;将al的数据写到dx这个端口
    68 0000003A C3                                       RET    
    69 0000003B                                 
    70 0000003B                                 _io_out16:  ;void io_out16(int port ,int data)
    71 0000003B 8B 54 24 04                              mov edx,[esp+4] ;port
    72 0000003F 66 8B 44 24 08                           mov ax,[esp+8]  ;data
    73 00000044 66 EF                                    out dx,ax       
    74 00000046 C3                                       RET 
    75 00000047                                 
    76 00000047                                 _io_out32:  ;void io_out32(int port ,int data)
    77 00000047 8B 54 24 04                              mov edx,[esp+4] ;port
    78 0000004B 8B 44 24 08                              mov eax,[esp+8]  ;data
    79 0000004F EF                                       out dx,eax      
    80 00000050 C3                                       RET 
    81 00000051                                 
    82 00000051                                 _io_load_eflags: ;int io_load_eflags(void)
    83 00000051 9C                                       pushfd   ;指push flag寄存器
    84 00000052 58                                       pop eax   ;这里解释一下：函数的返回值，在汇编中是由：char型 AL ； int型　AX
    85 00000053 C3                                       RET
    86 00000054                                 
    87 00000054                                 _io_store_eflags: ; void io_store_flags(int flags)
    88 00000054 8B 44 24 04                              mov eax,[esp+4]
    89 00000058 50                                       push eax
    90 00000059 9D                                       popfd
    91 0000005A C3                                       RET
    92 0000005B                                 
    93 0000005B                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    94 0000005B 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    95 00000060 66 89 44 24 06                  		MOV		[ESP+6],AX
    96 00000065 0F 01 54 24 06                  		LGDT	[ESP+6]
    97 0000006A C3                              		RET
    98 0000006B                                 
    99 0000006B                                 _load_idtr:		; void load_idtr(int limit, int addr);
   100 0000006B 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   101 00000070 66 89 44 24 06                  		MOV		[ESP+6],AX
   102 00000075 0F 01 5C 24 06                  		LIDT	[ESP+6]
   103 0000007A C3                              		RET
   104 0000007B                                 
   105 0000007B                                 _asm_inthandler21:
   106 0000007B 06                              	PUSH	ES
   107 0000007C 1E                              	PUSH	DS
   108 0000007D 60                              	PUSHAD
   109 0000007E 89 E0                           	MOV	EAX,ESP
   110 00000080 50                              	PUSH	EAX
   111 00000081 66 8C D0                        	MOV	AX,SS     ;以下三步是c规定的，必须相同 ss es ds
   112 00000084 8E D8                           	MOV	DS,AX
   113 00000086 8E C0                           	MOV	ES,AX
   114 00000088 E8 [00000000]                   	CALL	_inthandler21
   115 0000008D 58                              	POP	EAX
   116 0000008E 61                              	POPAD
   117 0000008F 1F                              	POP	DS
   118 00000090 07                              	POP	ES
   119 00000091 CF                              	IRETD
   120 00000092                                 
   121 00000092                                 _asm_inthandler27:
   122 00000092 06                              	PUSH	ES
   123 00000093 1E                              	PUSH	DS
   124 00000094 60                              	PUSHAD
   125 00000095 89 E0                           	MOV	EAX,ESP
   126 00000097 50                              	PUSH	EAX
   127 00000098 66 8C D0                        	MOV	AX,SS
   128 0000009B 8E D8                           	MOV	DS,AX
   129 0000009D 8E C0                           	MOV	ES,AX
   130 0000009F E8 [00000000]                   	CALL	_inthandler27
   131 000000A4 58                              	POP	EAX
   132 000000A5 61                              	POPAD
   133 000000A6 1F                              	POP	DS
   134 000000A7 07                              	POP	ES
   135 000000A8 CF                              	IRETD
   136 000000A9                                 
   137 000000A9                                 _asm_inthandler2c:
   138 000000A9 06                              	PUSH	ES
   139 000000AA 1E                              	PUSH	DS
   140 000000AB 60                              	PUSHAD
   141 000000AC 89 E0                           	MOV	EAX,ESP
   142 000000AE 50                              	PUSH	EAX
   143 000000AF 66 8C D0                        	MOV	AX,SS
   144 000000B2 8E D8                           	MOV	DS,AX
   145 000000B4 8E C0                           	MOV	ES,AX
   146 000000B6 E8 [00000000]                   	CALL	_inthandler2c
   147 000000BB 58                              	POP	EAX
   148 000000BC 61                              	POPAD
   149 000000BD 1F                              	POP	DS
   150 000000BE 07                              	POP	ES
   151 000000BF CF                              	IRETD